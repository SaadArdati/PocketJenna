workflows:
  android-workflow:
    name: Android Workflow
    instance_type: mac_mini_m1
    max_build_duration: 120
    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - $HOME/.gradle/caches
    environment:
      android_signing:
        - pocket_jenna_keystore
      groups:
        - google_play
      vars:
        PACKAGE_NAME: "dev.saadardati.pocketjenna" # <-- Put your package name here
        GOOGLE_PLAY_TRACK: "production"
      flutter: stable

    scripts:
      - name: Set up local.properties
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
      - name: Get Flutter packages
        script: |
          flutter packages pub get
      - name: Build AAB with Flutter
        script: |
          BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$PACKAGE_NAME" --tracks="$GOOGLE_PLAY_TRACK") + 1))      
          flutter build appbundle --release \
            --build-name=1.0.$BUILD_NUMBER \
            --build-number=$BUILD_NUMBER
      - name: Build universal apk
        script: |
          android-app-bundle build-universal-apk \
            --bundle 'pocketjenna/build/**/outputs/**/*.aab' \
            --ks /tmp/keystore.keystore \
            --ks-pass $CM_KEYSTORE_PASSWORD \
            --ks-key-alias $CM_KEY_ALIAS \
            --key-pass $CM_KEY_PASSWORD
    artifacts:
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/mapping.txt
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - saadoardati@gmail.com
        notify:
          success: true
          failure: true
      google_play:
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        track: $GOOGLE_PLAY_TRACK
        submit_as_draft: true

  macos-workflow:
    name: macOS Workflow
    max_build_duration: 120
    environment:
      groups:
        - APP_STORE_CONNECT_ISSUER_ID
        - APP_STORE_CONNECT_KEY_IDENTIFIER
        - APP_STORE_CONNECT_PRIVATE_KEY
        - CERTIFICATE_PRIVATE_KEY
      vars:
        BUNDLE_ID: "dev.saadardati.pocketjenna"
        APP_NAME: "Pocket Jenna"
      xcode: latest
      cocoapods: default
    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - $HOME/Library/Caches/CocoaPods
    scripts:
      - name: Set up keychain to be used for code signing using Codemagic CLI 'keychain' command
        script: keychain initialize
      - name: Fetch signing files
        script: |
          app-store-connect fetch-signing-files "$BUNDLE_ID" \
            --platform MAC_OS \
            --type MAC_APP_STORE \
            --create
      - name: Fetch Mac Installer Distribution certificates
        script: |
          app-store-connect list-certificates --type MAC_APP_DISTRIBUTION --save || \
          app-store-connect create-certificate --type MAC_APP_DISTRIBUTION --save
      - name: Set up signing certificate
        script: keychain add-certificates
      - name: Set up code signing settings on Xcode project
        script: xcode-project use-profiles
      - name: Get Flutter packages
        script: |
          flutter packages pub get
      - name: Install pods
        script: |
          find . -name "Podfile" -execdir pod install \;
      - name: Build Flutter macOS
        script: |
          flutter config --enable-macos-desktop && \
          flutter build macos --release
      - name: Package application
        script: |
        set -x
        
        # Command to find the path to your generated app, may be different
        APP_NAME=$(find $(pwd) -name "*.app")
        cd $(dirname "$APP_NAME")
        
        PACKAGE_NAME=$(basename "$APP_NAME" .app).pkg
        xcrun productbuild --component "$APP_NAME" /Applications/ unsigned.pkg  # Create and unsigned package
        
        # Find the installer certificate common name in keychain
        INSTALLER_CERT_NAME=$(keychain list-certificates \
        | jq '.[]
        | select(.common_name
        | contains("Mac Developer Installer"))
        | .common_name' \
        | xargs)

        xcrun productsign --sign "$INSTALLER_CERT_NAME" unsigned.pkg "$BUNDLE_ID" # Sign the package
        
        rm -f unsigned.pkg                                                       # Optionally remove the not needed unsigned package
#      - name: Notarize App
#        script: |
#          xcrun altool --notarize-app -f <file> --primary-bundle-id <bundle_id>
#                     {-u <username> [-p <password>] | --apiKey <api_key> --apiIssuer <issuer_id>}
#                     [--asc-provider <name> | --team-id <id> | --asc-public-id <id>]
    artifacts:
      - build/macos/**/*.pkg
    publishing:
      email:
        recipients:
          - saadoardati@gmail.com
        notify:
          success: true
          failure: true
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID

        # Configuration related to TestFlight (optional)
        # Note: This action is performed during post-processing.
        submit_to_testflight: true

        # Configuration related to App Store (optional)
        # Note: This action is performed during post-processing.
        submit_to_app_store: true

  web-workflow:
    name: Web app workflow
    max_build_duration: 10
    environment:
      flutter: stable
    scripts:
      - name: Get Flutter packages
        script: |
          flutter packages pub get
      - name: Flutter analyze
        script: |
          flutter analyze
      - name: Flutter unit tests
        script: |
          flutter test
      - name: Flutter build webapp
        script: |
          flutter build web --release
          cd build/web
          7z a -r ../web.zip ./*
    artifacts:
      - build/web.zip
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - user_1@example.com


